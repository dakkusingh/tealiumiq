<?php

/**
 * @file
 * Tealium iQ Integration.
 */

/**
 * Implements hook_page_attachments().
 */
function tealiumiq_page_attachments(array &$attachments) {
  // Example Code to implement tealium tags.
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  if (!$is_admin && $apiOnly == FALSE) {
    // Get the Tealium iQ service.
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    if ($tealiumiq->getAsync() == TRUE) {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Get all Tealium iQ properties.
      $properties = $tealiumiq->getProperties();

      // Add lib and settings if async is true.
      if (!empty($properties)) {
        $attachments['#attached']['library'][] = 'tealiumiq/tealiumiq_async';
        $attachments['#attached']['drupalSettings']['tealiumiq']['tealiumiq'] = [
          'utagurl' => $tealiumiq->getUtagUrl(),
          'async' => $tealiumiq->getAsync(),
        ];

        // Add utag data.
        $attachments['#attached']['drupalSettings']['tealiumiq']['tealiumiq']['utagData'] = $properties;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function tealiumiq_theme($existing, $type, $theme, $path) {
  return [
    'tealium_sync' => [
      'template' => 'tealium_sync',
      'path' => $path . '/templates',
      'variables' => [
        'utagurl' => NULL,
        'utagdata' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_bottom().
 */
function tealiumiq_page_bottom(array &$page_bottom) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  // Get Sync load position.
  $syncLoadPosition = \Drupal::config('tealiumiq.settings')->get('sync_load_position');

  if (!$is_admin && $apiOnly == FALSE) {
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    // Only set the tags if Synchronous tags is enabled.
    if ($tealiumiq->getAsync() == FALSE && $syncLoadPosition == 'bottom') {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Only do this if sync version of Tealium iQ is required.
      if (!empty($tealiumiq->getProperties())) {
        $page_bottom['tealiumiq'] = [
          '#theme' => 'tealium_sync',
          '#utagurl' => 'https:' . $tealiumiq->getUtagUrl(),
          '#utagdata' => $tealiumiq->getPropertiesJson(),
        ];
      }
    }
  }
}

/**
 * Implements hook_page_top().
 */
function tealiumiq_page_top(array &$page_top) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  // Get Sync load position.
  $syncLoadPosition = \Drupal::config('tealiumiq.settings')->get('sync_load_position');

  if (!$is_admin && $apiOnly == FALSE) {
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    // Only set the tags if Synchronous tags is enabled.
    if ($tealiumiq->getAsync() == FALSE && $syncLoadPosition == 'top') {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Only do this if sync version of Tealium iQ is required.
      if (!empty($tealiumiq->getProperties())) {
        $page_top['tealiumiq'] = [
          '#theme' => 'tealium_sync',
          '#utagurl' => 'https:' . $tealiumiq->getUtagUrl(),
          '#utagdata' => $tealiumiq->getPropertiesJson(),
        ];
      }
    }
  }
}
